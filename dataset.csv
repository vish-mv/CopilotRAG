question,ground_truth
How to deploy a webapp?,"To deploy a web application in Choreo, follow the steps below:\n\n1. **Create a project**:  On the organization home page, click **+ Create Project**. Enter a display name, unique name, and description for the project. Click **Create**. This creates the project and opens the project home page. \n\n2. **Create a Web Application component**: On the project home page, click **Web Application** under **Create a Single Component**. Enter a unique name and a description for the web application. \n\n3. **Connect to GitHub**: Go to the **GitHub** tab and click **Authorize with GitHub**. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository. You can also paste the repository URL in the **Provide Repository URL** field to connect to it without requiring authorization. \n\n4. **Enter the required information**: Enter the required information such as your GitHub account in the **Organization** field, repository name in the **Repository** field, and the branch name in the **Branch** field. \n\n5. **Select Buildpack**: Select a build Buildpack (eg: NodeJS, React, Python,PHP, etc.) as the **Buildpack** and provide the necessary details (eg: Project Directory, Language Version, Port, etc.). \n\n6. **Create the component**: Click **Create**. Choreo initializes the component with the sample implementation and opens the **Overview** page of the component.\n\n7. **Build your web application**: In the left navigation menu, click **Build**.In the Builds pane, click **Build**. This opens the Commits pane, where you can see all the commits related to the component. Select the latest commit and click **Build**. This triggers the build process and displays the progress in the **Build Logs pane**.\n\n8. **Deploy the web application**: In the left navigation menu, click **Deploy**. In the **Set Up** card, click **Configure and Deploy**. Click **Next** to move to the **Authentication Settings** pane. Keep the default settings and click **Deploy**. \n\n9. **Verify the deployment**: To verify that you have successfully hosted the web application, click the **Web App URL** in the **Development** card. This takes you to the web application."
How to resolve "Module not found error" during the deployment of a Python project?,"To resolve a **"Module not found"** error during the deployment of a Python project in Choreo:\n\n1. **Verify Dependencies:**\n   - Ensure all required Python modules are in `requirements.txt`\n   - Example `requirements.txt`:\n     ```plaintext\n     flask\n     requests\n     numpy\n     ```\n\n2. **Check File Paths:**\n   - Verify that the modules and packages being imported in your Python code have the correct file paths\n\n3. **Rebuild the Component:**\n   - Trigger a rebuild after updating `requirements.txt` or file paths. This will ensure that any changes made to the dependencies are included in the new build.\n\n4. **Inspect Logs:**\n   - . If the error persists, check build logs in Choreo Console UI for detailed error messages. The logs can provide more context on which module is not found and why. \n\n5. **Environment Configuration:**\n   - Ensure correct setup of environment variables in Choreo. Sometimes, environment variables might be needed for certain modules to work correctly."
How to add authentication to my service?,"To add **authentication** to a service in **Choreo**, you can utilize **Choreo's managed authentication** or configure **custom authentication**. Here are the steps for integrating managed authentication and custom authentication:\n\n**Managed Authentication**\nManaged authentication is a feature provided by **Choreo** that simplifies the process of adding authentication and authorization to your web application. It supports web applications created with **React**, **Angular**, or **Vue.js** buildpacks.\n\n**Steps to Implement Managed Authentication:**\n\n1. **Implement Sign-in Functionality:**\n```<button onClick={() => { window.location.href = "/auth/login" }}>Login</button>```\nThis redirects users to the **login path** where **Choreo** handles the authentication process.\n\n2. **Obtain User Information Claims:**\n\n**Via Cookie:**\n```import Cookies from 'js-cookie';\nconst encodedUserInfo = Cookies.get('userinfo');\nconst userInfo = JSON.parse(atob(encodedUserInfo));\nCookies.remove('userinfo', { path: '/' });```\n\n**Via GET Endpoint:**\n```const response = await fetch('/auth/userinfo');```\n\n3. **Implement Sign-out Functionality:**\n```<button onClick={async () => { window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;}}>Logout</button>```\n\n4. **Invoke APIs:**\n```const response = await fetch('/choreo-apis/<api-suffix>');```\n\n**Custom Authentication**\nIf you prefer to handle authentication manually or use custom authentication mechanisms, you can follow these steps:\n\n**Steps to Implement Custom Authentication:**\n\n1. **Add the Connection Configuration:**\n```window.configs = {\napiUrl: '<SERVICE_URL>',\nconsumerKey: '<CONSUMER_KEY>',\nconsumerSecret: '<CONSUMER_SECRET>',\ntokenUrl: '<TOKEN_URL>',\n};```\n\n2. **Read the Configuration:**\n```const serviceURL = window?.configs?.apiUrl ? window.configs.apiUrl : "/";```\n\n3. **Acquire an OAuth 2.0 Access Token:**\n\n**Using a cURL Command:**\n```CONSUMER_KEY="your_consumer_key"\nCONSUMER_SECRET="your_consumer_secret"\nTOKEN_URL="your_token_url"\nCLIENT_CREDENTIALS=$(echo -n "$CLIENT_ID:$CLIENT_SECRET" | base64)\ncurl -X POST $TOKEN_URL \n-H "Content-Type: application/x-www-form-urlencoded" \n-H "Authorization: Basic $CLIENT_CREDENTIALS" \n--data-urlencode "grant_type=client_credentials"```\n\n4. **Invoke the Service:**\n```const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n}\n});```\n\nBy following these steps, you can successfully add **authentication** to your service in **Choreo** using either **managed authentication** or **custom authentication** methods."
How to add a custom domain to my web app?,"to add a custom domain to a web app in Choreo:\n\nPrerequisites:\n1. Ensure you have organization administrator privileges.\n2. Make sure your web app is deployed in the desired environment.\n\nSteps to Add a Custom Domain:\n1. **Sign in to the Choreo Console**.\n2. **Access Organization Settings**:\n   * Click the **Organization** list in the Choreo Console header.\n   * In the left navigation menu, click **Settings**.\n   * Go to the **URL Settings** tab and then click the **Active Domains** tab.\n3. **Add the Custom Domain**:\n   * Click **+ Add Domains**.\n   * In the **Add a Custom Domain** pane, enter your domain name.\n   * Select the environment where you want to apply the domain name.\n   * Select the entity type as **Web App**.\n   * Note the generated CNAME target value displayed and create a DNS record associating your domain name to the CNAME target value with your DNS provider.\n4. **Verify the Domain**:\n   * Once the CNAME type DNS record is created, click **Verify**.\n5. **Configure TLS Certificates**:\n   * On successful verification, click **Next**.\n   * Select a TLS certificate provider. You can either import your own TLS certificates or allow Choreo to generate and manage the certificates using **Let's Encrypt**.\n6. **Save the Custom Domain**:\n   * Click **Add** to save the custom domain.\n\nConfigure a Custom URL for Your Web App:\n1. **Request a Custom URL**:\n   * Sign in to the Choreo Console.\n   * In the **Component Listing** pane, click on your web app.\n   * Click **Settings** in the left navigation menu.\n   * Go to the **URL Settings** tab. If an active custom domain is available, the **Edit URL Mapping** icon in the corresponding **Action** column will be enabled.\n2. **Configure the URL**:\n   * Click the **Edit URL Mapping** icon under the **Action** column for the desired environment.\n   * Select the domain from the **Domain** drop-down list.\n   * Click **Configure** to create the custom URL mapping. The custom URL request will be in **Pending** status until approved by an organization administrator.\n3. **Approval**:\n   * The organization administrator needs to approve the custom URL request from the organization-level settings page under the **Pending URL Requests** tab.\n\nOnce the custom URL request is approved, the custom domain will be applied to your web app."
How can I test my service?,"To test your service in **Choreo**, you can use the integrated **OpenAPI Console** within the **Choreo Console UI**. Here are the detailed steps to perform the test:\n\n**Steps to Test the Service in Choreo Console**\n\n1. **Navigate to the Test Console**:\n   - In the **Choreo Console** left navigation menu, click **Test** and then click **Console**.\n\n2. **Select the Environment**:\n   - In the **OpenAPI Console** that opens, select **Development** from the environment drop-down list.\n\n3. **Choose the Endpoint**:\n   - In the **Endpoint** list, select the relevant **REST endpoint** for your service.\n\n4. **Test the GET Method**:\n   - Expand the **GET /** method (e.g., **GET /books**).\n   - Click **Try it out**.\n   - Click **Execute**.\n   - Check the **Server Response** section to see the response from the server.\n\n5. **Test the POST Method**:\n   - Expand the **POST /** method (e.g., **POST /books**).\n   - Click **Try it out**.\n   - Update the **request body** with the necessary parameters. For example:\n   ```\n   {\n     "author": "Your Author",\n     "status": "to_read",\n     "title": "Your Title"\n   }\n   ```\n   - Click **Execute**.\n   - Check the **Server Response** section. On successful invocation, you should receive a **201 HTTP status code**.\n\n6. **Additional Methods**:\n   - Similarly, you can expand and test other methods (e.g., **PUT**, **DELETE**) available for your service by following the **Try it out** and **Execute** steps."
How can I add environment variables to python webapp?,"To set up environment variables in **Choreo**, follow these steps:\n\n**Steps to Apply Environment Variables**\n\n1. **Navigate to Your Component in Choreo Console**:\n   - Go to the **Component Listing** pane and click on the component you want to configure.\n\n2. Access **Configurations & Secrets**:\n   - In the left navigation menu, click **DevOps** and then click **Configs & Secrets**.\n\n3. **Create a New Environment Variable**:\n   - Click **+ Create**.\n   - In the **Create a Config or Secret** pane, select **Environment Variables**.\n\n4. **Mark as a Secret (Optional)**:\n   - If you need the environment variable values to be secrets, select **Mark as a Secret**. Note that you will not be able to read these values after setting them.\n\n5. **Specify the Environment Variables**:\n   - Enter the **Display Name** for your configuration or secret.\n   - Under **Add Environment Variables**, specify the environment variables as **key-value pairs**.\n   - Click **Add Item** to add more variables if needed.\n\n6. **Finalize Creation**:\n   - Click **Create** to save your environment variables.\n\n**Additional Tips**\n\n- **Ballerina Configurables**: If you are dealing with Ballerina components, you can manage configurables separately. Configurables can be used instead of environment variables for file mounts in Ballerina components. \n\n**Security Note**\n\n- All configurations and secrets are stored in an encrypted secret vault managed by **WSO2** in the cloud data plane. If you are on a private data plane, they are stored in an **Azure key vault** or **AWS secret manager** attached to your data plane in your cloud environment."
How to connect the React frontend to the backend?,"1: Create and Deploy Your Backend Service\nFirst, ensure your backend service is deployed in Choreo. If you don't have a service yet, you can create one by following these steps:\n1. **Connect to Your Repository:**\n   * On the project home page, click **Start** under **Create Multiple Components**.\n   * Go to the **GitHub** tab and authorize Choreo to connect to your GitHub account.\n   * Enter the repository URL and branch details.\n   * Select and configure the backend service component.\n2. **Build and Deploy the Service:**\n   * Click the service component listed under **Component Listing** on the project home page.\n   * In the left navigation menu, click **Build** and then **Build Latest**.\n   * Once the build is complete, proceed to deploy the service.\n\nStep 2: Create a React Frontend Application in Choreo\nNext, create a web application component for your React frontend:\n1. **Create the Web Application Component:**\n   * In the Choreo Console header, select your project.\n   * Click **+ Create** under **Component Listing**.\n   * Select **Web Application** and fill in the necessary details (display name, unique name, description).\n   * Authorize with GitHub to connect your repository.\n   * Enter your GitHub account, repository, and branch details.\n   * Select **React** as the buildpack.\n   * Enter the build configuration details (`Project Directory`, `Build Command`, `Build Path`, `Node Version`).\n2. **Build the Web Application Component:**\n   * In the left navigation menu, click **Build** and then **Build Latest**.\n\nStep 3: Connect the Web Application to the Backend Service\nTo establish a connection between your React frontend and the backend service:\n1. **Create a Connection:**\n   * In the left navigation menu, click **Dependencies** and then **Connections**.\n   * Click **+ Create** and select your backend service.\n   * Provide a name and description for the connection and click **Create**.\n   * Copy the service URL displayed for the Development environment.\n2. **Configure the Web Application:**\n   * In the left navigation menu, click **Deploy** and then **Configure and Deploy**.\n   * In the `config.js` file mount, replace `<Service URL>` with the copied service URL:\n     ```javascript\n     window.configs = {\n       apiUrl: '<Service URL>',\n     };\n     ```\n   * Ensure managed authentication is enabled and configure authentication settings (Post Login Path, Post Logout Path, Error Path).\n3. **Deploy the Web Application:**\n   * Click **Deploy** in the **Authentication** pane.\n   * Once deployed, copy the **Web App URL**.\n\nStep 4: Access and Test Your Application\n* Navigate to the web app URL to verify that your React frontend is successfully connected to the backend service."
How can I deploy my backend and then connect it to the frontend deployed in github pages?,"To deploy a backend service on Choreo and connect it to a frontend hosted on GitHub Pages, follow these steps:\n\nStep 1: Deploy the Backend Service on Choreo\n1. Create a Project in Choreo:\n   * Go to the Choreo Console and sign in.\n   * On the organization home page, click **+ Create Project**.\n   * Enter a display name, unique name, and description for the project.\n   * Click **Create** to create the project and open the project home page.\n\n2. Connect Your GitHub Repository and Configure the Service:\n   * On the project home page, click **Start** under **Create Multiple Components**.\n   * Go to the **GitHub** tab.\n   * Click **Authorize with GitHub** to allow Choreo to connect to your GitHub account.\n   * Enter the GitHub account details, repository, and branch.\n   * In the **Add Component Directories** pane, click the + icon corresponding to your backend service directory.\n   * Configure the service component by specifying details such as Component Display Name, Component Name, Path, Component Type, Buildpack, and Language Version.\n   * Click **Save** and then **Finish** to initialize the service.\n\n3. Build and deploy the service\n   3.1: Build\n   * On the project home page, click the service component you created. This takes you to the component overview page.\n   * In the left navigation, click **Build**.\n   * Click **Build Latest**. The build process may take a while, and you can track the progress via the logs in the Build Details pane.\n   * Once the build process is complete, the build status changes to Success.\n\n   3.2: Deploy\n   * In the left navigation menu, click **Deploy**.\n   * On the **Set Up** card, click **Configure & Deploy**.\n   * In the **Environment Configurations** pane, click **Next**.\n   * In the **File Mount** pane, click **Next**.\n   * Review the **Endpoint Details** and click **Deploy**. In the Endpoint Details pane that opens, ensure that the Network Visibility is set to Public. This setting securely exposes the endpoint for external consumption.\n   * The deployment process may take some time, and you can track the progress by observing the logs.\n   * Once the deployment is complete, the build status changes to Active on the Development environment card.\n\n   Ensure that your backend service is configured to allow CORS (Cross-Origin Resource Sharing) requests from your frontend's domain (GitHub Pages). \n   This is crucial for enabling communication between the two different domains.\n   To do that follow these steps\n\n   3.3.: Enable CORS\n   * From your Development card access endpoint details. \n   * In the Endpoint Details pane Go to settings. \n   * From the security tab in the settings you can allow CORS.\n\nTo connect your service to the frontend deployed outside choreo in this case github pages you need to get the public url for your service.\n\n4. Getting the Public URL:\n   * Once the deployment is complete, navigate to the component overview page where you can find the service URL.\n   * Copy the public URL of the service from the development environment card.\n\n5. Then you have to manually add this public URL as the API URL in your frontend code.\n   Use this API URL in your frontend to make HTTP requests (e.g., GET, POST) to interact with your backend service."
How can I implement testing for a full-stack application including automated testing for both frontend and backend components?,"To implement automated testing for both frontend and backend components in a full-stack application using Choreo, follow these steps:\n\n**Backend Testing with Test Runner**\n\n**Create a Test Runner Component:**\n1. Go to the Choreo Console.\n2. **Click `+Create`** in the Component Listing section.\n3.Select  **`Test Runner`.**\n4. Enter a unique name and description for the test runner component.\n5. Go to the `GitHub` tab and enter:\n   - **GitHub Account**\n   - **GitHub Repository**\n   - **Branch**\n6. Select a buildpack based on the language of your choice.\n7. Enter the relevant values based on the selected buildpack.\n8. **Click `Create`.\n**Build and Deploy the Test Runner Component:**\n1. Navigate to `Build` on the left panel.\n2. **Click `Build`** and select the latest commit.\n3. Once the build completes, go to `Deploy`.\n4. **Click `Deploy`** to deploy the Test Runner component, or use `Configure and Deploy` for additional configurations.\n5. After deployment, go to `Execute` and select the environment.\n6. **Click `Run Now`** to trigger the test execution.\n7. Once execution is completed, click on a particular execution to view the test results.\n\n**Frontend Testing**\n\n**Access and Test Frontend Application:**\n1. Access the frontend application via its web URL.\n2. Perform manual testing by interacting with the application (e.g., adding items, checking user-specific data)."
I'm getting "procfile not found" error for my python service. How do I resolve this?,"The error you're encountering is because Choreo requires a `Procfile` in your Python project's root directory. A `Procfile` is a configuration file used to declare the commands that are run by your application's containers. \n\nFor a Python project, your `Procfile` might look something like this:\n```\nweb: <command to start your application>\n``` \nFor example, if you're using Flask, your `Procfile` should look like this:\n```\nweb: flask run --host=0.0.0.0\n```\n\nPlease ensure that you have a `Procfile` in your project root directory and that it contains the appropriate command to start your application. You can refer more on this from the [Choreo documentation](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/#develop-a-component)."
I'm getting .choreo/endpoints.yaml not found error. How do I resolve this?,"The error message you're seeing, '.choreo/endpoints.yaml not found', indicates that the `endpoints.yaml` file is missing from your project's root directory in the `.choreo` folder. This file is required to define the endpoints for your service component. \n\nTo resolve this error, you need to create an `endpoints.yaml` file in the `.choreo` directory at the build context path and commit it to the source repository. The `endpoints.yaml` file should contain details about the endpoints that your service component will expose. Here is a sample `endpoints.yaml` file:\n\n```yaml\nversion: 0.1\nendpoints:\n- name: Your Service\n port: 9090\n type: REST\n networkVisibility: Project\n context: /your_service\n schemaFilePath: your_service_openapi.yaml\n```\n\nIn this file:\n\n- `name` is a unique name for the endpoint, which Choreo will use to generate the managed API.\n- `port` is the numeric port value that gets exposed via this endpoint.\n- `type` is the type of traffic this endpoint is accepting, such as `REST`, `GraphQL`, `gRPC`, `UDP`or `TCP`.\n- `networkVisibility` is the network level visibility of this endpoint, which defaults to `Public` if not specified. Accepted values are `Project`, `Organization`, or `Public`.\n- `context` is the context (base path) of the API that Choreo exposes via this endpoint. \n- `schemaFilePath` is the swagger definition file path. This field should be a relative path to the project path.\n\nPlease make sure to replace 'Your Service' and '/your_service' with the actual name and context of your service, and 'your_service_openapi.yaml' with the actual OpenAPI schema file.\n\nFor more detailed information about the `endpoints.yaml` file and its structure, you can refer to the following documentation"
Tell me how I can configure a readiness probe?,"To configure a readiness probe in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to configure readiness probes.\n2. In the left navigation menu, click **DevOps** and then click **Health Checks**.\n3. On the **Health Checks** page, click **+ Create**.\n4. Configure the readiness probe depending on your requirement.\n5. Click **Save**. \n\nYou can update or remove a probe at any time. After setting up the probe, you can ensure that the container works as expected by clicking **Runtime** under **DevOps** in the left navigation menu. On the **Runtime** page, check the details to confirm that the container works as expected. If the container does not start, check the **events and conditions** to see if any of the probes are causing the container to fail.\n\nReadiness probes run periodically throughout the lifecycle of a container. Unlike liveness probes, these probes do not restart the container if the probe fails. Instead, they stop the container from receiving network traffic. Be mindful when you configure readiness probes on a single-running replica. If the readiness probe fails, your application stops receiving traffic because there is only one active replica. The application may not recover unless the liveness probe fails and restarts the container.\n\nYou can configure the following probe types for readiness probes:\n\n- HTTP `GET` request: This probe sends an HTTP `GET` request to a specified port and path on the container. A response status code in the range of 200-399 indicates that the request is a success. Depending on your requirement, you can configure additional HTTP headers. The recommended approach is to create a `/healthz` or `/health` endpoint in your service for this purpose.\n- TCP connection probe: This probe attempts to open a socket to the container on the specified port. If it cannot establish a TCP connection, it becomes a failure.\n- Execute a command: This probe executes a given script inside the container. A non-zero return from the command is considered a failure. For example, `[\""cat\"", \""/tmp/healthy\""]` is considered healthy if the file `/tmp/healthy` is present. If not, it becomes a failure (non-zero exit code). In such scenarios, the application is responsible for writing and maintaining this file in the specified location.\n\nFor more details, please refer to the [Set Up Health Checks] documentation."
How to configure Azure as an external IdP?,"To configure Azure Active Directory (Azure AD) as an external Identity Provider (IdP) in Choreo, you need to follow a sequence of steps. Before you begin, ensure that you have the following prerequisites:\n\n1. An Azure Active Directory account. You can set up an Azure Active Directory account at [Azure's website](https://azure.microsoft.com/en-gb/) if you don't already have one.\n2. Administrator rights to your Choreo organization. This is required to configure the Azure AD account in your organization.\n\nHere are the steps to add Azure AD as an IdP in Choreo:\n\n1. Sign in to the Choreo Console at [Choreo Console](https://console.choreo.dev/).\n2. In the left navigation menu, click **Settings**.\n3. In the header, click the **Organization** list. This will open the organization level settings page.\n4. On the **Application Security** tab, click **Identity Providers** and then click **+ Identity Provider**.\n5. Select **Microsoft Entra ID (Azure AD)** as the Identity Provider.\n6. Provide a name and a description for the IdP.\n7. To obtain the `Well-Known URL` of your Azure AD instance, on your Azure account, under **Azure Active Directory** go to **App registrations**, and then **Endpoints**. Copy the URI under`OpenID Connect metadata document`.\n8. Leave the **Apply to all environments** checkbox selected. However, if you want to restrict the use of the external IdP to a certain environment, you can select them from the **Environments** list.\n9. Review the endpoints and click **Next**.\n\nPlease note that in Azure, there are two versions of access tokens available. By default, the IDP applications you create use the v1 access token. Therefore, if you intend to use the v1 access token, when providing the `Well-Known URL`, omit the v2.0 path segment from the URL. If you intend to work with v2.0, then the IDP application's manifest should be changed as explained in the access token documentation.\n\nFor more detailed steps, you can refer to the [official documentation]"